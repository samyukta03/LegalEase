{"ast":null,"code":"/**\n * @typedef {'html'|'js'} Style\n *\n * @typedef Options\n *   Configuration.\n * @property {Style} [style='js']\n *   Style of white space to support.\n * @property {boolean} [preserveLineEndings=false]\n *   Whether to collapse white space containing a line ending to that line\n *   ending.\n *   The default is to collapse to a single space.\n * @property {boolean} [trim=false]\n *   Whether to drop white space at the start and end of `value`.\n *   The default is to keep it.\n */\nvar js = /\\s+/g;\nvar html = /[\\t\\n\\v\\f\\r ]+/g;\n/**\n * Collapse white space.\n *\n * @param {string} value\n *   Value to collapse white space in.\n * @param {Style|Options} [options='js']\n *   Configuration.\n * @returns {string}\n *   Value with collapsed white space.\n */\n\nexport function collapseWhiteSpace(value, options) {\n  if (!options) {\n    options = {};\n  } else if (typeof options === 'string') {\n    options = {\n      style: options\n    };\n  }\n\n  var replace = options.preserveLineEndings ? replaceLineEnding : replaceSpace;\n  return String(value).replace(options.style === 'html' ? html : js, options.trim ? trimFactory(replace) : replace);\n}\n/**\n * Replace white space with a line ending as that line ending and otherwise a\n * space.\n *\n * @param {string} value\n * @returns {string}\n */\n\nfunction replaceLineEnding(value) {\n  var match = /\\r?\\n|\\r/.exec(value);\n  return match ? match[0] : ' ';\n}\n/**\n * Replace white space with a space.\n *\n * @returns {string}\n */\n\n\nfunction replaceSpace() {\n  return ' ';\n}\n/**\n * @param {(value: string) => string} replace\n */\n\n\nfunction trimFactory(replace) {\n  return dropOrReplace;\n  /**\n   * Replace white space with nothing if it starts or ends the string.\n   * Calls `replace` otherwise.\n   *\n   * @param {string} value\n   * @param {number} index\n   * @param {string} all\n   * @returns {string}\n   */\n\n  function dropOrReplace(value, index, all) {\n    return index === 0 || index + value.length === all.length ? '' : replace(value);\n  }\n}","map":{"version":3,"sources":["F:/Project-Legal.ly/node_modules/collapse-white-space/index.js"],"names":["js","html","collapseWhiteSpace","value","options","style","replace","preserveLineEndings","replaceLineEnding","replaceSpace","String","trim","trimFactory","match","exec","dropOrReplace","index","all","length"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,EAAE,GAAG,MAAX;AACA,IAAMC,IAAI,GAAG,iBAAb;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAAmCC,OAAnC,EAA4C;AACjD,MAAI,CAACA,OAAL,EAAc;AACZA,IAAAA,OAAO,GAAG,EAAV;AACD,GAFD,MAEO,IAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AACtCA,IAAAA,OAAO,GAAG;AAACC,MAAAA,KAAK,EAAED;AAAR,KAAV;AACD;;AAED,MAAME,OAAO,GAAGF,OAAO,CAACG,mBAAR,GAA8BC,iBAA9B,GAAkDC,YAAlE;AAEA,SAAOC,MAAM,CAACP,KAAD,CAAN,CAAcG,OAAd,CACLF,OAAO,CAACC,KAAR,KAAkB,MAAlB,GAA2BJ,IAA3B,GAAkCD,EAD7B,EAELI,OAAO,CAACO,IAAR,GAAeC,WAAW,CAACN,OAAD,CAA1B,GAAsCA,OAFjC,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,iBAAT,CAA2BL,KAA3B,EAAkC;AAChC,MAAMU,KAAK,GAAG,WAAWC,IAAX,CAAgBX,KAAhB,CAAd;AACA,SAAOU,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAR,GAAc,GAA1B;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASJ,YAAT,GAAwB;AACtB,SAAO,GAAP;AACD;AAED;AACA;AACA;;;AACA,SAASG,WAAT,CAAqBN,OAArB,EAA8B;AAC5B,SAAOS,aAAP;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,WAASA,aAAT,CAAuBZ,KAAvB,EAA8Ba,KAA9B,EAAqCC,GAArC,EAA0C;AACxC,WAAOD,KAAK,KAAK,CAAV,IAAeA,KAAK,GAAGb,KAAK,CAACe,MAAd,KAAyBD,GAAG,CAACC,MAA5C,GACH,EADG,GAEHZ,OAAO,CAACH,KAAD,CAFX;AAGD;AACF","sourcesContent":["/**\n * @typedef {'html'|'js'} Style\n *\n * @typedef Options\n *   Configuration.\n * @property {Style} [style='js']\n *   Style of white space to support.\n * @property {boolean} [preserveLineEndings=false]\n *   Whether to collapse white space containing a line ending to that line\n *   ending.\n *   The default is to collapse to a single space.\n * @property {boolean} [trim=false]\n *   Whether to drop white space at the start and end of `value`.\n *   The default is to keep it.\n */\n\nconst js = /\\s+/g\nconst html = /[\\t\\n\\v\\f\\r ]+/g\n\n/**\n * Collapse white space.\n *\n * @param {string} value\n *   Value to collapse white space in.\n * @param {Style|Options} [options='js']\n *   Configuration.\n * @returns {string}\n *   Value with collapsed white space.\n */\nexport function collapseWhiteSpace(value, options) {\n  if (!options) {\n    options = {}\n  } else if (typeof options === 'string') {\n    options = {style: options}\n  }\n\n  const replace = options.preserveLineEndings ? replaceLineEnding : replaceSpace\n\n  return String(value).replace(\n    options.style === 'html' ? html : js,\n    options.trim ? trimFactory(replace) : replace\n  )\n}\n\n/**\n * Replace white space with a line ending as that line ending and otherwise a\n * space.\n *\n * @param {string} value\n * @returns {string}\n */\nfunction replaceLineEnding(value) {\n  const match = /\\r?\\n|\\r/.exec(value)\n  return match ? match[0] : ' '\n}\n\n/**\n * Replace white space with a space.\n *\n * @returns {string}\n */\nfunction replaceSpace() {\n  return ' '\n}\n\n/**\n * @param {(value: string) => string} replace\n */\nfunction trimFactory(replace) {\n  return dropOrReplace\n\n  /**\n   * Replace white space with nothing if it starts or ends the string.\n   * Calls `replace` otherwise.\n   *\n   * @param {string} value\n   * @param {number} index\n   * @param {string} all\n   * @returns {string}\n   */\n  function dropOrReplace(value, index, all) {\n    return index === 0 || index + value.length === all.length\n      ? ''\n      : replace(value)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}