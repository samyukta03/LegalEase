{"ast":null,"code":"module.exports = parse;\nmodule.exports.toArray = str2array;\n\nfunction parseTag(tag) {\n  tag = tag.split(';');\n  var el = {\n    value: tag[0].trim(),\n    q: tag[1]\n  };\n\n  if (!el.value) {\n    return;\n  }\n\n  var lang = el.value.split('-');\n  el.language = lang[0];\n  el.region = (lang[1] || '').toUpperCase();\n\n  if (!el.q) {\n    el.q = 1;\n  } else {\n    el.q = parseFloat(el.q.slice(2));\n\n    if (isNaN(el.q)) {\n      el.q = 1;\n    }\n  }\n\n  return el;\n}\n\nfunction str2array(acceptLanguage) {\n  return (acceptLanguage || '').split(',').map(parseTag).filter(Boolean) // filter empty\n  .sort(function (a, b) {\n    return b.q - a.q;\n  });\n} // parse Accept-Language header with memoization\n\n\nfunction parse(req) {\n  if (req._parsedAcceptLanguage) {\n    return req._parsedAcceptLanguage;\n  }\n\n  var acceptLanguage = req.get('accept-language');\n  req._parsedAcceptLanguage = str2array(acceptLanguage);\n  req._parsedAcceptLanguage._raw = acceptLanguage;\n  return req._parsedAcceptLanguage;\n}","map":{"version":3,"sources":["F:/Project-Legal.ly/node_modules/parse-accept-language/lib/parse-accept-language.js"],"names":["module","exports","parse","toArray","str2array","parseTag","tag","split","el","value","trim","q","lang","language","region","toUpperCase","parseFloat","slice","isNaN","acceptLanguage","map","filter","Boolean","sort","a","b","req","_parsedAcceptLanguage","get","_raw"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AACAF,MAAM,CAACC,OAAP,CAAeE,OAAf,GAAyBC,SAAzB;;AAEA,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACrBA,EAAAA,GAAG,GAAGA,GAAG,CAACC,KAAJ,CAAU,GAAV,CAAN;AACA,MAAMC,EAAE,GAAG;AACTC,IAAAA,KAAK,EAAEH,GAAG,CAAC,CAAD,CAAH,CAAOI,IAAP,EADE;AAETC,IAAAA,CAAC,EAAEL,GAAG,CAAC,CAAD;AAFG,GAAX;;AAIA,MAAI,CAACE,EAAE,CAACC,KAAR,EAAe;AACb;AACD;;AAED,MAAMG,IAAI,GAAGJ,EAAE,CAACC,KAAH,CAASF,KAAT,CAAe,GAAf,CAAb;AAEAC,EAAAA,EAAE,CAACK,QAAH,GAAcD,IAAI,CAAC,CAAD,CAAlB;AACAJ,EAAAA,EAAE,CAACM,MAAH,GAAY,CAACF,IAAI,CAAC,CAAD,CAAJ,IAAW,EAAZ,EAAgBG,WAAhB,EAAZ;;AACA,MAAI,CAACP,EAAE,CAACG,CAAR,EAAW;AACTH,IAAAA,EAAE,CAACG,CAAH,GAAO,CAAP;AACD,GAFD,MAEO;AACLH,IAAAA,EAAE,CAACG,CAAH,GAAOK,UAAU,CAACR,EAAE,CAACG,CAAH,CAAKM,KAAL,CAAW,CAAX,CAAD,CAAjB;;AACA,QAAIC,KAAK,CAACV,EAAE,CAACG,CAAJ,CAAT,EAAiB;AACfH,MAAAA,EAAE,CAACG,CAAH,GAAO,CAAP;AACD;AACF;;AACD,SAAOH,EAAP;AACD;;AAED,SAASJ,SAAT,CAAmBe,cAAnB,EAAmC;AACjC,SAAO,CAACA,cAAc,IAAI,EAAnB,EAAuBZ,KAAvB,CAA6B,GAA7B,EACJa,GADI,CACAf,QADA,EAEJgB,MAFI,CAEGC,OAFH,EAEa;AAFb,GAGJC,IAHI,CAGC,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUA,CAAC,CAACd,CAAF,GAAMa,CAAC,CAACb,CAAlB;AAAA,GAHD,CAAP;AAID,C,CAED;;;AACA,SAAST,KAAT,CAAewB,GAAf,EAAoB;AAClB,MAAGA,GAAG,CAACC,qBAAP,EAA8B;AAC5B,WAAOD,GAAG,CAACC,qBAAX;AACD;;AACD,MAAMR,cAAc,GAAGO,GAAG,CAACE,GAAJ,CAAQ,iBAAR,CAAvB;AACAF,EAAAA,GAAG,CAACC,qBAAJ,GAA4BvB,SAAS,CAACe,cAAD,CAArC;AACAO,EAAAA,GAAG,CAACC,qBAAJ,CAA0BE,IAA1B,GAAiCV,cAAjC;AACA,SAAOO,GAAG,CAACC,qBAAX;AACD","sourcesContent":["module.exports = parse;\nmodule.exports.toArray = str2array;\n\nfunction parseTag(tag) {\n  tag = tag.split(';');\n  const el = {\n    value: tag[0].trim(),\n    q: tag[1]\n  };\n  if (!el.value) {\n    return;\n  }\n\n  const lang = el.value.split('-');\n\n  el.language = lang[0];\n  el.region = (lang[1] || '').toUpperCase();\n  if (!el.q) {\n    el.q = 1;\n  } else {\n    el.q = parseFloat(el.q.slice(2));\n    if (isNaN(el.q)) {\n      el.q = 1;\n    }\n  }\n  return el;\n}\n\nfunction str2array(acceptLanguage) {\n  return (acceptLanguage || '').split(',')\n    .map(parseTag)\n    .filter(Boolean)  // filter empty\n    .sort((a, b) => b.q - a.q);\n}\n\n// parse Accept-Language header with memoization\nfunction parse(req) {\n  if(req._parsedAcceptLanguage) {\n    return req._parsedAcceptLanguage;\n  }\n  const acceptLanguage = req.get('accept-language');\n  req._parsedAcceptLanguage = str2array(acceptLanguage);\n  req._parsedAcceptLanguage._raw = acceptLanguage;\n  return req._parsedAcceptLanguage;\n}\n"]},"metadata":{},"sourceType":"script"}