{"ast":null,"code":"export var bigram = nGram(2);\nexport var trigram = nGram(3);\n/**\n * Factory returning a function that converts a value string to n-grams.\n *\n * @param {number} n\n */\n\nexport function nGram(n) {\n  if (typeof n !== 'number' || Number.isNaN(n) || n < 1 || n === Number.POSITIVE_INFINITY) {\n    throw new Error('`' + n + '` is not a valid argument for `n-gram`');\n  }\n\n  return grams;\n  /**\n   * Create n-grams from a given value.\n   *\n   * @template {string|Array<unknown>} T\n   * @param {T} [value]\n   * @returns {T extends any[] ? T : Array<string>}\n   */\n\n  function grams(value) {\n    /** @type {T extends any[] ? T : Array<string>} */\n    // @ts-expect-error: pretty sure this is fine.\n    var nGrams = [];\n\n    if (value === null || value === undefined) {\n      return nGrams;\n    }\n\n    var source = typeof value.slice === 'function' ? value : String(value);\n    var index = source.length - n + 1;\n\n    if (index < 1) {\n      return nGrams;\n    }\n\n    while (index--) {\n      nGrams[index] = source.slice(index, index + n);\n    }\n\n    return nGrams;\n  }\n}","map":{"version":3,"sources":["F:/Project-Legal.ly/node_modules/n-gram/index.js"],"names":["bigram","nGram","trigram","n","Number","isNaN","POSITIVE_INFINITY","Error","grams","value","nGrams","undefined","source","slice","String","index","length"],"mappings":"AAAA,OAAO,IAAMA,MAAM,GAAGC,KAAK,CAAC,CAAD,CAApB;AACP,OAAO,IAAMC,OAAO,GAAGD,KAAK,CAAC,CAAD,CAArB;AAEP;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASA,KAAT,CAAeE,CAAf,EAAkB;AACvB,MACE,OAAOA,CAAP,KAAa,QAAb,IACAC,MAAM,CAACC,KAAP,CAAaF,CAAb,CADA,IAEAA,CAAC,GAAG,CAFJ,IAGAA,CAAC,KAAKC,MAAM,CAACE,iBAJf,EAKE;AACA,UAAM,IAAIC,KAAJ,CAAU,MAAMJ,CAAN,GAAU,wCAApB,CAAN;AACD;;AAED,SAAOK,KAAP;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,WAASA,KAAT,CAAeC,KAAf,EAAsB;AACpB;AACA;AACA,QAAMC,MAAM,GAAG,EAAf;;AAEA,QAAID,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKE,SAAhC,EAA2C;AACzC,aAAOD,MAAP;AACD;;AAED,QAAME,MAAM,GAAG,OAAOH,KAAK,CAACI,KAAb,KAAuB,UAAvB,GAAoCJ,KAApC,GAA4CK,MAAM,CAACL,KAAD,CAAjE;AACA,QAAIM,KAAK,GAAGH,MAAM,CAACI,MAAP,GAAgBb,CAAhB,GAAoB,CAAhC;;AAEA,QAAIY,KAAK,GAAG,CAAZ,EAAe;AACb,aAAOL,MAAP;AACD;;AAED,WAAOK,KAAK,EAAZ,EAAgB;AACdL,MAAAA,MAAM,CAACK,KAAD,CAAN,GAAgBH,MAAM,CAACC,KAAP,CAAaE,KAAb,EAAoBA,KAAK,GAAGZ,CAA5B,CAAhB;AACD;;AAED,WAAOO,MAAP;AACD;AACF","sourcesContent":["export const bigram = nGram(2)\nexport const trigram = nGram(3)\n\n/**\n * Factory returning a function that converts a value string to n-grams.\n *\n * @param {number} n\n */\nexport function nGram(n) {\n  if (\n    typeof n !== 'number' ||\n    Number.isNaN(n) ||\n    n < 1 ||\n    n === Number.POSITIVE_INFINITY\n  ) {\n    throw new Error('`' + n + '` is not a valid argument for `n-gram`')\n  }\n\n  return grams\n\n  /**\n   * Create n-grams from a given value.\n   *\n   * @template {string|Array<unknown>} T\n   * @param {T} [value]\n   * @returns {T extends any[] ? T : Array<string>}\n   */\n  function grams(value) {\n    /** @type {T extends any[] ? T : Array<string>} */\n    // @ts-expect-error: pretty sure this is fine.\n    const nGrams = []\n\n    if (value === null || value === undefined) {\n      return nGrams\n    }\n\n    const source = typeof value.slice === 'function' ? value : String(value)\n    let index = source.length - n + 1\n\n    if (index < 1) {\n      return nGrams\n    }\n\n    while (index--) {\n      nGrams[index] = source.slice(index, index + n)\n    }\n\n    return nGrams\n  }\n}\n"]},"metadata":{},"sourceType":"module"}