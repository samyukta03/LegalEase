{"ast":null,"code":"var fs = require('fs'),\n    unicode = require('unicode-9.0.0');\n\nvar profiles = 'profiles';\nvar _langlist = [];\n_wordLangProbMap = {};\nvar URL_REGEX = /[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi,\n    MAIL_REGEX = /(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/gi,\n    LATIN1_EXCLUDED = \"\\xA0\\xAB\\xB0\\xBB\",\n    CJKS = '',\n    N_GRAM = 3,\n    TRIALS = 7,\n    PROB_THRESHOLD = 0.1,\n    ALPHA_DEFAULT = 0.5,\n    ALPHA_WIDTH = 0.05,\n    ITERATION_LIMIT = 1000,\n    BASE_FREQ = 10000,\n    CONV_THRESHOLD = 0.99999,\n    MAX_TEXT_LENGTH = 10000;\n\nexports.detect = function (text) {\n  text = normalizeText(text);\n  text = reduceSpace(text);\n  text = cleanText(text);\n  var ngrams = extractNGram(text);\n  if (ngrams.length == 0) return null;\n  var langprob = new Array(_langlist.length),\n      priorMap = null,\n      alpha = ALPHA_WIDTH;\n\n  for (var j = 0; j < langprob.length; j++) {\n    langprob[j] = 0;\n  }\n\n  for (var i = 0; i < TRIALS; i++) {\n    var prob = new Array(_langlist.length),\n        current_alpha = alpha + Math.random() * ALPHA_WIDTH;\n\n    var updateLangProb = function updateLangProb(word) {\n      if (!word || !_wordLangProbMap[word]) return false;\n      var langProbMap = _wordLangProbMap[word],\n          weight = current_alpha / BASE_FREQ;\n\n      for (var k = 0; k < prob.length; k++) {\n        prob[k] *= weight + (langProbMap[k] ? langProbMap[k] : 0);\n      }\n\n      return true;\n    },\n        normalizeProb = function normalizeProb() {\n      var maxp = 0,\n          sump = 0;\n\n      for (var k = 0; k < prob.length; k++) {\n        sump += prob[k];\n      }\n\n      for (var k = 0; k < prob.length; k++) {\n        var p = prob[k] / sump;\n        if (maxp < p) maxp = p;\n        prob[k] = p;\n      }\n\n      return maxp;\n    };\n\n    if (priorMap) {\n      for (var j = 0; j < prob.length; j++) {\n        prob[j] = priorMap[j];\n      }\n    } else {\n      for (var j = 0; j < prob.length; j++) {\n        prob[j] = 1.0 / _langlist.length;\n      }\n    }\n\n    for (var j = 0;; j++) {\n      var r = parseInt(Math.random() * ngrams.length);\n      updateLangProb(ngrams[r]);\n\n      if (j % 5 == 0) {\n        if (normalizeProb(prob) > CONV_THRESHOLD || j >= ITERATION_LIMIT) break;\n      }\n    }\n\n    for (var j = 0; j < langprob.length; j++) {\n      langprob[j] += (prob[j] || 0) / TRIALS;\n    }\n  }\n\n  var retlist = [];\n\n  for (var i = 0; i < langprob.length; i++) {\n    var p = langprob[i];\n\n    if (p > PROB_THRESHOLD) {\n      retlist.push({\n        lang: _langlist[i],\n        prob: p\n      });\n    }\n  }\n\n  retlist.sort(function (a, b) {\n    return b.prob - a.prob;\n  });\n  return retlist;\n};\n\nexports.detectOne = function (text) {\n  var langs = exports.detect(text);\n  return langs.length > 0 ? langs[0].lang : null;\n};\n\nfunction normalizeText(text) {\n  text = text.replace(URL_REGEX, ' ');\n  text = text.replace(MAIL_REGEX, ' ');\n  return text;\n}\n\nfunction reduceSpace(text) {\n  var pre = null,\n      ret = '';\n\n  for (var i = 0; i < text.length && i < MAX_TEXT_LENGTH; i++) {\n    var c = text[i];\n    if (c != ' ' || pre != ' ') ret += c;\n    pre = c;\n  }\n\n  return ret;\n}\n\nfunction cleanText(text) {\n  var latinCount = 0,\n      nonLatinText = '';\n\n  for (var i = 0; i < text.length; i++) {\n    var c = text[i];\n\n    if (c <= 'z' && c >= 'A') {\n      ++latinCount;\n    } else if (c >= \"\\u0300\" && getUnicodeBlock(c) != 'Latin Extended Additional') {\n      nonLatinText += c;\n    }\n  }\n\n  if (latinCount * 2 < nonLatinText.length) return nonLatinText;\n  return text;\n}\n\nfunction extractNGram(text) {\n  var grams_ = ' ',\n      capitalword_ = false,\n      list = [];\n\n  for (var i = 0; i < text.length; i++) {\n    // NGram.addChar\n    var ch = normalize(text[i]),\n        lastchar = grams_[grams_.length - 1],\n        do_not_add = false;\n\n    if (lastchar == ' ') {\n      grams_ = ' ';\n      capitalword_ = false;\n      if (ch == ' ') do_not_add = true;\n    } else if (grams_.length >= N_GRAM) {\n      grams_ = grams_.substring(1, grams_.length);\n    }\n\n    if (!do_not_add) {\n      grams_ += ch;\n\n      if (ch != ch.toLowerCase()) {\n        if (lastchar != lastchar.toLowerCase()) capitalword_ = true;\n      } else {\n        capitalword_ = false;\n      }\n    }\n\n    for (var n = 1; n <= N_GRAM; n++) {\n      var w = null; // NGram.get\n\n      if (!capitalword_) {\n        var len = grams_.length;\n\n        if (n >= 1 && n <= 3 && len >= n) {\n          if (n == 1 && grams_[len - 1] != ' ') w = grams_[len - 1];else w = grams_.substring(len - n, len);\n        }\n      }\n\n      if (w && _wordLangProbMap[w]) list.push(w);\n    }\n  }\n\n  return list;\n}\n\nfunction normalize(ch) {\n  var ub = getUnicodeBlock(ch);\n\n  switch (ub) {\n    case 'Basic Latin':\n      if (ch < 'A' || ch < 'a' && ch > 'Z' || ch > 'z') ch = ' ';\n      break;\n\n    case 'Latin-1 Supplement':\n      if (LATIN1_EXCLUDED.indexOf(ch) >= 0) ch = ' ';\n      break;\n\n    case 'Latin Extended-B':\n      // normalization for Romanian\n      if (ch == \"\\u0219\") ch = \"\\u015F\"; // Small S with comma below => with cedilla\n\n      if (ch == \"\\u021B\") ch = \"\\u0163\"; // Small T with comma below => with cedilla\n\n      break;\n\n    case 'Latin Extended Additional':\n      if (ch >= \"\\u1EA0\") ch = \"\\u1EC3\";\n      break;\n\n    case 'Arabic':\n      if (ch == \"\\u06CC\") ch = \"\\u064A\";\n      break;\n    // Farsi yeh => Arabic yeh\n\n    case 'Hiragana':\n      ch = \"\\u3042\";\n      break;\n\n    case 'Katakana':\n      ch = \"\\u30A2\";\n      break;\n\n    case 'Hangul Jamo':\n    case 'Hangul Jamo Extended-A':\n    case 'Hangul Jamo Extended-B':\n    case 'Hangul Compatibility Jamo':\n      ch = \"\\u314B\";\n      break;\n\n    case 'Hangul Syllables':\n      ch = \"\\uAC00\";\n      break;\n\n    case 'Bopomofo':\n    case 'Bopomofo Extended':\n      ch = \"\\u3105\";\n      break;\n\n    case 'General Punctuation':\n      ch = ' ';\n      break;\n  }\n\n  return ch;\n}\n/**\n * Unicode Initialization\n */\n\n\nvar UnicodeBlocks = [];\n\nfunction getUnicodeBlock(char) {\n  for (var i = 0; i < UnicodeBlocks.length; i++) {\n    if (UnicodeBlocks[i].regex.test(char)) {\n      return UnicodeBlocks[i].name;\n    }\n  }\n\n  return null;\n}\n/**\n * LangDetect Initialization\n */\n\n\nfunction prepare() {\n  var langlist = fs.readdirSync(__dirname + '/' + profiles);\n\n  for (var i = 0; i < langlist.length; i++) {\n    var file = langlist[i],\n        lang = file.split('.')[0],\n        profile = require(__dirname + '/' + profiles + '/' + file);\n\n    if (_langlist.indexOf[lang] >= 0) throw new Error('duplicate the same language profile');\n\n    _langlist.push(lang);\n\n    for (var word in profile.freq) {\n      if (!_wordLangProbMap[word]) _wordLangProbMap[word] = new Array(langlist.length);\n      var len = word.length;\n\n      if (len >= 1 && len <= 3) {\n        var prob = profile.freq[word] / profile.n_words[len - 1];\n        _wordLangProbMap[word][i] = prob;\n      }\n    }\n  }\n\n  unicode.Block.forEach(function (unicode_block) {\n    UnicodeBlocks.push({\n      name: unicode_block,\n      regex: require('unicode-9.0.0/Block/' + unicode_block + '/regex')\n    });\n  });\n}\n\nprepare();","map":{"version":3,"sources":["F:/Project-Legal.ly/node_modules/langdetect/index.js"],"names":["fs","require","unicode","profiles","_langlist","_wordLangProbMap","URL_REGEX","MAIL_REGEX","LATIN1_EXCLUDED","CJKS","N_GRAM","TRIALS","PROB_THRESHOLD","ALPHA_DEFAULT","ALPHA_WIDTH","ITERATION_LIMIT","BASE_FREQ","CONV_THRESHOLD","MAX_TEXT_LENGTH","exports","detect","text","normalizeText","reduceSpace","cleanText","ngrams","extractNGram","length","langprob","Array","priorMap","alpha","j","i","prob","current_alpha","Math","random","updateLangProb","word","langProbMap","weight","k","normalizeProb","maxp","sump","p","r","parseInt","retlist","push","lang","sort","a","b","detectOne","langs","replace","pre","ret","c","latinCount","nonLatinText","getUnicodeBlock","grams_","capitalword_","list","ch","normalize","lastchar","do_not_add","substring","toLowerCase","n","w","len","ub","indexOf","UnicodeBlocks","char","regex","test","name","prepare","langlist","readdirSync","__dirname","file","split","profile","Error","freq","n_words","Block","forEach","unicode_block"],"mappings":"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","sourcesContent":["var fs = require('fs'),\n\tunicode = require('unicode-9.0.0');\nvar profiles = 'profiles';\n\nvar _langlist = [];\n\t_wordLangProbMap = {};\n\nvar URL_REGEX = /[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi,\n\tMAIL_REGEX = /(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/gi,\n\tLATIN1_EXCLUDED = '\\u00A0\\u00AB\\u00B0\\u00BB',\n\tCJKS = '',\n\tN_GRAM = 3,\n\tTRIALS = 7,\n\tPROB_THRESHOLD = 0.1,\n\tALPHA_DEFAULT = 0.5,\n\tALPHA_WIDTH = 0.05,\n\tITERATION_LIMIT = 1000,\n\tBASE_FREQ = 10000,\n\tCONV_THRESHOLD = 0.99999,\n\tMAX_TEXT_LENGTH = 10000;\n\nexports.detect = function (text) {\n\ttext = normalizeText(text);\n\ttext = reduceSpace(text);\n\ttext = cleanText(text);\n\n\tvar ngrams = extractNGram(text);\n\tif(ngrams.length == 0) return null;\n\n\tvar langprob = new Array(_langlist.length),\n\t    priorMap = null,\n\t    alpha = ALPHA_WIDTH;\n\n\tfor(var j=0; j<langprob.length; j++) langprob[j] = 0;\n\n\tfor(var i=0; i< TRIALS; i++) {\n\t    var prob = new Array(_langlist.length),\n\t        current_alpha = alpha + Math.random() * ALPHA_WIDTH;\n\n\t    var updateLangProb = function (word) {\n\t        if (!word || !_wordLangProbMap[word]) return false;\n\n\t        var langProbMap = _wordLangProbMap[word],\n\t            weight = current_alpha / BASE_FREQ;\n\n\t        for (var k=0; k<prob.length; k++) {\n\t            prob[k] *= weight + (langProbMap[k] ? langProbMap[k] :  0);\n\t        }\n\n\t        return true;\n\t    }, normalizeProb = function () {\n\t        var maxp = 0, sump = 0;\n\t        for(var k=0; k<prob.length; k++) sump += prob[k];\n\t        for(var k=0; k<prob.length; k++) {\n\t            var p = prob[k] / sump;\n\t            if (maxp < p) maxp = p;\n\t            prob[k] = p;\n\t        }\n\t        return maxp;\n\t    }\n\n        if (priorMap) {\n            for(var j=0; j<prob.length; j++) prob[j] = priorMap[j];\n        } else {\n            for(var j=0; j<prob.length; j++) prob[j] = 1.0 / _langlist.length;\n        }\n\n        for(var j=0;; j++) {\n            var r = parseInt(Math.random() * ngrams.length);\n            updateLangProb(ngrams[r]);\n\n            if(j % 5 == 0) {\n                if (normalizeProb(prob) > CONV_THRESHOLD || j >= ITERATION_LIMIT) break;\n            }\n        }\n\n        for(var j=0; j<langprob.length; j++) langprob[j] += (prob[j] || 0) / TRIALS;\n\t}\n\n\tvar retlist = [];\n\tfor(var i=0; i<langprob.length; i++) {\n\t    var p = langprob[i];\n\t    if(p > PROB_THRESHOLD) {\n\t        retlist.push({\n\t            lang: _langlist[i],\n\t            prob: p\n\t        });\n\t    }\n\t}\n\n\tretlist.sort(function (a, b) { return b.prob - a.prob; });\n\n\treturn retlist;\n};\n\nexports.detectOne = function (text) {\n    var langs = exports.detect(text);\n    return langs.length > 0 ? langs[0].lang : null;\n};\n\nfunction normalizeText (text) {\n\ttext = text.replace(URL_REGEX, ' ');\n\ttext = text.replace(MAIL_REGEX, ' ');\n\n\treturn text;\n}\n\nfunction reduceSpace (text) {\n\tvar pre = null, ret = '';\n\tfor(var i=0; (i<text.length) && (i<MAX_TEXT_LENGTH); i++) {\n\t\tvar c = text[i];\n\t\tif(c != ' ' || pre != ' ') ret += c;\n\t\tpre = c;\n\t}\n\n\treturn ret;\n}\n\nfunction cleanText (text) {\n\tvar latinCount = 0, nonLatinText = '';\n\n\tfor(var i=0; i<text.length; i++) {\n\t\tvar c = text[i]\n\t\tif(c <= 'z' && c >= 'A') {\n\t\t\t++latinCount;\n\t\t} else if (c >= '\\u0300' && (getUnicodeBlock(c) != 'Latin Extended Additional')) {\n\t\t\tnonLatinText += c;\n\t\t}\n\t}\n\n\tif (latinCount * 2 < nonLatinText.length)\n\t\treturn nonLatinText;\n\n\treturn text;\n}\n\nfunction extractNGram (text) {\n    var grams_ = ' ',\n        capitalword_ = false,\n        list = [];\n\n\tfor(var i=0; i<text.length; i++) {\n\t    // NGram.addChar\n\t\tvar ch = normalize(text[i]),\n\t\t    lastchar = grams_[grams_.length - 1],\n\t\t    do_not_add = false;\n\n\t\tif(lastchar == ' ') {\n\t\t    grams_ = ' ';\n            capitalword_ = false;\n            if (ch == ' ') do_not_add = true;\n\t\t} else if(grams_.length >= N_GRAM) {\n\t\t    grams_ = grams_.substring(1, grams_.length);\n\t\t}\n\n\t\tif(!do_not_add) {\n\t\t    grams_ += ch;\n\n\t        if(ch != ch.toLowerCase()) {\n\t            if (lastchar != lastchar.toLowerCase()) capitalword_ = true;\n\t        } else {\n\t            capitalword_ = false;\n\t        }\n\t\t}\n\n\t\tfor(var n=1; n<=N_GRAM; n++) {\n\t\t    var w = null;\n\t\t    // NGram.get\n\t\t    if(!capitalword_) {\n\t\t        var len = grams_.length;\n\t\t        if(n >= 1 && n <= 3 && len >= n) {\n\t\t            if(n == 1 && grams_[len - 1] != ' ') w = grams_[len - 1];\n\t\t            else w = grams_.substring(len - n, len);\n\t\t        }\n\t\t    }\n\n\t\t    if(w && _wordLangProbMap[w]) list.push(w);\n        }\n\t}\n\n\treturn list;\n}\n\nfunction normalize (ch) {\n\tvar ub = getUnicodeBlock(ch);\n\tswitch(ub) {\n\tcase 'Basic Latin': if(ch < 'A' || (ch < 'a' && ch > 'Z') || ch > 'z') ch = ' '; break;\n\tcase 'Latin-1 Supplement': if(LATIN1_EXCLUDED.indexOf(ch) >= 0) ch = ' '; break;\n\tcase 'Latin Extended-B':\n\t\t// normalization for Romanian\n\t\tif (ch == '\\u0219') ch = '\\u015f'; // Small S with comma below => with cedilla\n\t\tif (ch == '\\u021b') ch = '\\u0163'; // Small T with comma below => with cedilla\n\t\tbreak;\n\tcase 'Latin Extended Additional': if (ch >= '\\u1ea0') ch = '\\u1ec3'; break;\n\tcase 'Arabic': if (ch == '\\u06cc') ch = '\\u064a'; break; // Farsi yeh => Arabic yeh\n\tcase 'Hiragana': ch = '\\u3042'; break;\n\tcase 'Katakana': ch = '\\u30a2'; break;\n\tcase 'Hangul Jamo':\n\tcase 'Hangul Jamo Extended-A':\n\tcase 'Hangul Jamo Extended-B':\n\tcase 'Hangul Compatibility Jamo': ch = '\\u314b'; break;\n\tcase 'Hangul Syllables': ch = '\\uac00'; break;\n\tcase 'Bopomofo':\n\tcase 'Bopomofo Extended': ch = '\\u3105'; break;\n\tcase 'General Punctuation':\n\t\tch = ' ';\n\t\tbreak;\n\t}\n\treturn ch;\n}\n\n/**\n * Unicode Initialization\n */\nvar UnicodeBlocks = [];\nfunction getUnicodeBlock (char) {\n\tfor(var i=0; i<UnicodeBlocks.length; i++) {\n\t\tif(UnicodeBlocks[i].regex.test(char)) {\n\t\t\treturn UnicodeBlocks[i].name;\n\t\t}\n\t}\n\treturn null;\n}\n\n/**\n * LangDetect Initialization\n */\nfunction prepare() {\n\tvar langlist = fs.readdirSync(__dirname + '/' + profiles);\n\n\tfor(var i=0; i<langlist.length; i++) {\n\t\tvar file = langlist[i],\n\t\t\tlang = file.split('.')[0],\n\t\t\tprofile = require(__dirname + '/' + profiles + '/' + file);\n\n\t\tif(_langlist.indexOf[lang] >= 0) throw new Error('duplicate the same language profile');\n\t\t_langlist.push(lang);\n\n\t\tfor(var word in profile.freq) {\n\t\t\tif(!_wordLangProbMap[word]) _wordLangProbMap[word] = new Array(langlist.length);\n\t\t\tvar len = word.length;\n\t\t\tif (len >= 1 && len <= 3) {\n\t\t\t\tvar prob = profile.freq[word] / profile.n_words[len - 1];\n\t\t\t\t_wordLangProbMap[word][i] = prob;\n            }\n\t\t}\n\t}\n\n\tunicode.Block.forEach(function (unicode_block) {\n\t\tUnicodeBlocks.push({\n\t\t\tname: unicode_block,\n\t\t\tregex: require('unicode-9.0.0/Block/' + unicode_block + '/regex')\n\t\t});\n\t});\n}\n\nprepare();\n"]},"metadata":{},"sourceType":"script"}