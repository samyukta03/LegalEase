{"ast":null,"code":"/**\n * @typedef {[string, number]} TrigramTuple\n * @typedef {TrigramTuple[]} TrigramTuples\n * @typedef {Record<string, number>} TrigramDictionary\n */\nimport { trigram } from 'n-gram';\nimport { collapseWhiteSpace } from 'collapse-white-space';\nvar own = {}.hasOwnProperty;\n/**\n * Clean `value`.\n * Removed general non-important (as in, for language detection) punctuation\n * marks, symbols, and digits.\n *\n * @param {string|null} [value]\n * @returns {string}\n */\n\nexport function clean(value) {\n  if (value === null || value === undefined) {\n    return '';\n  }\n\n  return collapseWhiteSpace(String(value).replace(/[\\u0021-\\u0040]+/g, ' ')).trim().toLowerCase();\n}\n/**\n * Get clean, padded, trigrams.\n *\n * @param {string} [value]\n * @returns {string[]}\n */\n\nexport function trigrams(value) {\n  return trigram(' ' + clean(value) + ' ');\n}\n/**\n * Get an `Object` with trigrams as its attributes, and their occurence count as\n * their values.\n *\n * @param {string} value\n * @returns {TrigramDictionary}\n */\n\nexport function asDictionary(value) {\n  var values = trigrams(value);\n  /** @type {TrigramDictionary} */\n\n  var dictionary = {};\n  var index = -1;\n\n  while (++index < values.length) {\n    if (own.call(dictionary, values[index])) {\n      dictionary[values[index]]++;\n    } else {\n      dictionary[values[index]] = 1;\n    }\n  }\n\n  return dictionary;\n}\n/**\n * Get an `Array` containing trigram--count tuples from a given value.\n *\n * @param {string} value\n * @returns {TrigramTuples}\n */\n\nexport function asTuples(value) {\n  var dictionary = asDictionary(value);\n  /** @type {TrigramTuples} */\n\n  var tuples = [];\n  /** @type {string} */\n\n  var trigram;\n\n  for (trigram in dictionary) {\n    if (own.call(dictionary, trigram)) {\n      tuples.push([trigram, dictionary[trigram]]);\n    }\n  }\n\n  tuples.sort(sort);\n  return tuples;\n}\n/**\n * Get an `Array` containing trigram--count tuples from a given value.\n *\n * @param {TrigramTuples} tuples\n * @returns {TrigramDictionary}\n */\n\nexport function tuplesAsDictionary(tuples) {\n  /** @type {TrigramDictionary} */\n  var dictionary = {};\n  var index = -1;\n\n  while (++index < tuples.length) {\n    dictionary[tuples[index][0]] = tuples[index][1];\n  }\n\n  return dictionary;\n}\n/**\n * Deep regular sort on item at `1` in both `Object`s.\n *\n * @param {TrigramTuple} a\n * @param {TrigramTuple} b\n * @returns {number}\n */\n\nfunction sort(a, b) {\n  return a[1] - b[1];\n}","map":{"version":3,"sources":["F:/Project-Legal.ly/node_modules/trigram-utils/index.js"],"names":["trigram","collapseWhiteSpace","own","hasOwnProperty","clean","value","undefined","String","replace","trim","toLowerCase","trigrams","asDictionary","values","dictionary","index","length","call","asTuples","tuples","push","sort","tuplesAsDictionary","a","b"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,SAAQA,OAAR,QAAsB,QAAtB;AACA,SAAQC,kBAAR,QAAiC,sBAAjC;AAEA,IAAMC,GAAG,GAAG,GAAGC,cAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAC3B,MAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAAhC,EAA2C;AACzC,WAAO,EAAP;AACD;;AAED,SAAOL,kBAAkB,CAACM,MAAM,CAACF,KAAD,CAAN,CAAcG,OAAd,CAAsB,mBAAtB,EAA2C,GAA3C,CAAD,CAAlB,CACJC,IADI,GAEJC,WAFI,EAAP;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkBN,KAAlB,EAAyB;AAC9B,SAAOL,OAAO,CAAC,MAAMI,KAAK,CAACC,KAAD,CAAX,GAAqB,GAAtB,CAAd;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASO,YAAT,CAAsBP,KAAtB,EAA6B;AAClC,MAAMQ,MAAM,GAAGF,QAAQ,CAACN,KAAD,CAAvB;AACA;;AACA,MAAMS,UAAU,GAAG,EAAnB;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;;AAEA,SAAO,EAAEA,KAAF,GAAUF,MAAM,CAACG,MAAxB,EAAgC;AAC9B,QAAId,GAAG,CAACe,IAAJ,CAASH,UAAT,EAAqBD,MAAM,CAACE,KAAD,CAA3B,CAAJ,EAAyC;AACvCD,MAAAA,UAAU,CAACD,MAAM,CAACE,KAAD,CAAP,CAAV;AACD,KAFD,MAEO;AACLD,MAAAA,UAAU,CAACD,MAAM,CAACE,KAAD,CAAP,CAAV,GAA4B,CAA5B;AACD;AACF;;AAED,SAAOD,UAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,QAAT,CAAkBb,KAAlB,EAAyB;AAC9B,MAAMS,UAAU,GAAGF,YAAY,CAACP,KAAD,CAA/B;AACA;;AACA,MAAMc,MAAM,GAAG,EAAf;AACA;;AACA,MAAInB,OAAJ;;AAEA,OAAKA,OAAL,IAAgBc,UAAhB,EAA4B;AAC1B,QAAIZ,GAAG,CAACe,IAAJ,CAASH,UAAT,EAAqBd,OAArB,CAAJ,EAAmC;AACjCmB,MAAAA,MAAM,CAACC,IAAP,CAAY,CAACpB,OAAD,EAAUc,UAAU,CAACd,OAAD,CAApB,CAAZ;AACD;AACF;;AAEDmB,EAAAA,MAAM,CAACE,IAAP,CAAYA,IAAZ;AAEA,SAAOF,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,kBAAT,CAA4BH,MAA5B,EAAoC;AACzC;AACA,MAAML,UAAU,GAAG,EAAnB;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;;AAEA,SAAO,EAAEA,KAAF,GAAUI,MAAM,CAACH,MAAxB,EAAgC;AAC9BF,IAAAA,UAAU,CAACK,MAAM,CAACJ,KAAD,CAAN,CAAc,CAAd,CAAD,CAAV,GAA+BI,MAAM,CAACJ,KAAD,CAAN,CAAc,CAAd,CAA/B;AACD;;AAED,SAAOD,UAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASO,IAAT,CAAcE,CAAd,EAAiBC,CAAjB,EAAoB;AAClB,SAAOD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAf;AACD","sourcesContent":["/**\n * @typedef {[string, number]} TrigramTuple\n * @typedef {TrigramTuple[]} TrigramTuples\n * @typedef {Record<string, number>} TrigramDictionary\n */\n\nimport {trigram} from 'n-gram'\nimport {collapseWhiteSpace} from 'collapse-white-space'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Clean `value`.\n * Removed general non-important (as in, for language detection) punctuation\n * marks, symbols, and digits.\n *\n * @param {string|null} [value]\n * @returns {string}\n */\nexport function clean(value) {\n  if (value === null || value === undefined) {\n    return ''\n  }\n\n  return collapseWhiteSpace(String(value).replace(/[\\u0021-\\u0040]+/g, ' '))\n    .trim()\n    .toLowerCase()\n}\n\n/**\n * Get clean, padded, trigrams.\n *\n * @param {string} [value]\n * @returns {string[]}\n */\nexport function trigrams(value) {\n  return trigram(' ' + clean(value) + ' ')\n}\n\n/**\n * Get an `Object` with trigrams as its attributes, and their occurence count as\n * their values.\n *\n * @param {string} value\n * @returns {TrigramDictionary}\n */\nexport function asDictionary(value) {\n  const values = trigrams(value)\n  /** @type {TrigramDictionary} */\n  const dictionary = {}\n  let index = -1\n\n  while (++index < values.length) {\n    if (own.call(dictionary, values[index])) {\n      dictionary[values[index]]++\n    } else {\n      dictionary[values[index]] = 1\n    }\n  }\n\n  return dictionary\n}\n\n/**\n * Get an `Array` containing trigram--count tuples from a given value.\n *\n * @param {string} value\n * @returns {TrigramTuples}\n */\nexport function asTuples(value) {\n  const dictionary = asDictionary(value)\n  /** @type {TrigramTuples} */\n  const tuples = []\n  /** @type {string} */\n  let trigram\n\n  for (trigram in dictionary) {\n    if (own.call(dictionary, trigram)) {\n      tuples.push([trigram, dictionary[trigram]])\n    }\n  }\n\n  tuples.sort(sort)\n\n  return tuples\n}\n\n/**\n * Get an `Array` containing trigram--count tuples from a given value.\n *\n * @param {TrigramTuples} tuples\n * @returns {TrigramDictionary}\n */\nexport function tuplesAsDictionary(tuples) {\n  /** @type {TrigramDictionary} */\n  const dictionary = {}\n  let index = -1\n\n  while (++index < tuples.length) {\n    dictionary[tuples[index][0]] = tuples[index][1]\n  }\n\n  return dictionary\n}\n\n/**\n * Deep regular sort on item at `1` in both `Object`s.\n *\n * @param {TrigramTuple} a\n * @param {TrigramTuple} b\n * @returns {number}\n */\nfunction sort(a, b) {\n  return a[1] - b[1]\n}\n"]},"metadata":{},"sourceType":"module"}