{"ast":null,"code":"// middleware that selects preferred language from the list of defaults\nvar debug = require('debug')('detect-language'); // see: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4\n\n\nfunction findMatch(supportedLanguages, parsedAcceptLanguage) {\n  var candidate;\n\n  for (var a = 0; a < parsedAcceptLanguage.length; a += 1) {\n    candidate = null;\n    var accepted = parsedAcceptLanguage[a];\n\n    for (var s = 0; s < supportedLanguages.length; s += 1) {\n      var supported = supportedLanguages[s];\n\n      if (supported.value === accepted.value) {\n        return supportedLanguages[s];\n      }\n\n      if (!candidate && supported.language === accepted.language) {\n        candidate = supported;\n      }\n    }\n\n    if (candidate) {\n      return candidate;\n    }\n  }\n}\n\nfunction lang2obj(lang) {\n  var codeAndRegion = lang.split('-');\n  return {\n    value: lang,\n    language: codeAndRegion[0],\n    region: codeAndRegion[1]\n  };\n}\n\nvar parseAcceptLanguage = require('parse-accept-language');\n\nmodule.exports = function (opts) {\n  var supportedLanguages = [opts.defaultLanguage].concat(opts.supportedLanguages).map(lang2obj); // mark language the we select by default with low quality\n\n  var defaultParsedLanguage = Object.assign({\n    q: -1\n  }, supportedLanguages[0]);\n  return function detectLanguage(req, res, next) {\n    if (req.lang) {\n      debug('skip - language already detected:', req.lang);\n      return next();\n    }\n\n    debug('started:', req.lang);\n    var pal = parseAcceptLanguage(req);\n    req.parsedLang = findMatch(supportedLanguages, pal) || defaultParsedLanguage;\n    req.lang = req.parsedLang.value;\n    debug('detected:', req.lang);\n    next();\n  };\n};","map":{"version":3,"sources":["F:/Project-Legal.ly/node_modules/detect-language/lib/detect-language.js"],"names":["debug","require","findMatch","supportedLanguages","parsedAcceptLanguage","candidate","a","length","accepted","s","supported","value","language","lang2obj","lang","codeAndRegion","split","region","parseAcceptLanguage","module","exports","opts","defaultLanguage","concat","map","defaultParsedLanguage","Object","assign","q","detectLanguage","req","res","next","pal","parsedLang"],"mappings":"AAAA;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,iBAAjB,CAAd,C,CAEA;;;AACA,SAASC,SAAT,CAAmBC,kBAAnB,EAAuCC,oBAAvC,EAA6D;AAC3D,MAAIC,SAAJ;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,oBAAoB,CAACG,MAAzC,EAAiDD,CAAC,IAAI,CAAtD,EAAyD;AACvDD,IAAAA,SAAS,GAAG,IAAZ;AACA,QAAMG,QAAQ,GAAGJ,oBAAoB,CAACE,CAAD,CAArC;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,kBAAkB,CAACI,MAAvC,EAA+CE,CAAC,IAAI,CAApD,EAAuD;AACrD,UAAMC,SAAS,GAAGP,kBAAkB,CAACM,CAAD,CAApC;;AACA,UAAIC,SAAS,CAACC,KAAV,KAAoBH,QAAQ,CAACG,KAAjC,EAAwC;AACtC,eAAOR,kBAAkB,CAACM,CAAD,CAAzB;AACD;;AACD,UAAI,CAACJ,SAAD,IAAcK,SAAS,CAACE,QAAV,KAAuBJ,QAAQ,CAACI,QAAlD,EAA4D;AAC1DP,QAAAA,SAAS,GAAGK,SAAZ;AACD;AACF;;AACD,QAAIL,SAAJ,EAAe;AACb,aAAOA,SAAP;AACD;AACF;AACF;;AAED,SAASQ,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,MAAMC,aAAa,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAtB;AACA,SAAO;AACLL,IAAAA,KAAK,EAAEG,IADF;AAELF,IAAAA,QAAQ,EAAEG,aAAa,CAAC,CAAD,CAFlB;AAGLE,IAAAA,MAAM,EAAEF,aAAa,CAAC,CAAD;AAHhB,GAAP;AAKD;;AAED,IAAMG,mBAAmB,GAAGjB,OAAO,CAAC,uBAAD,CAAnC;;AAEAkB,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgB;AAC/B,MAAMlB,kBAAkB,GAAG,CAAEkB,IAAI,CAACC,eAAP,EACxBC,MADwB,CACjBF,IAAI,CAAClB,kBADY,EAExBqB,GAFwB,CAEpBX,QAFoB,CAA3B,CAD+B,CAK/B;;AACA,MAAMY,qBAAqB,GAAGC,MAAM,CAACC,MAAP,CAAc;AAAEC,IAAAA,CAAC,EAAE,CAAC;AAAN,GAAd,EAAyBzB,kBAAkB,CAAC,CAAD,CAA3C,CAA9B;AAEA,SAAO,SAAS0B,cAAT,CAAwBC,GAAxB,EAA6BC,GAA7B,EAAkCC,IAAlC,EAAwC;AAC7C,QAAIF,GAAG,CAAChB,IAAR,EAAc;AACZd,MAAAA,KAAK,CAAC,mCAAD,EAAsC8B,GAAG,CAAChB,IAA1C,CAAL;AACA,aAAOkB,IAAI,EAAX;AACD;;AACDhC,IAAAA,KAAK,CAAC,UAAD,EAAa8B,GAAG,CAAChB,IAAjB,CAAL;AACA,QAAMmB,GAAG,GAAGf,mBAAmB,CAACY,GAAD,CAA/B;AACAA,IAAAA,GAAG,CAACI,UAAJ,GAAiBhC,SAAS,CAACC,kBAAD,EAAqB8B,GAArB,CAAT,IAAsCR,qBAAvD;AACAK,IAAAA,GAAG,CAAChB,IAAJ,GAAWgB,GAAG,CAACI,UAAJ,CAAevB,KAA1B;AACAX,IAAAA,KAAK,CAAC,WAAD,EAAc8B,GAAG,CAAChB,IAAlB,CAAL;AACAkB,IAAAA,IAAI;AACL,GAXD;AAYD,CApBD","sourcesContent":["// middleware that selects preferred language from the list of defaults\n\nconst debug = require('debug')('detect-language');\n\n// see: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4\nfunction findMatch(supportedLanguages, parsedAcceptLanguage) {\n  let candidate;\n\n  for (let a = 0; a < parsedAcceptLanguage.length; a += 1) {\n    candidate = null;\n    const accepted = parsedAcceptLanguage[a];\n    for (let s = 0; s < supportedLanguages.length; s += 1) {\n      const supported = supportedLanguages[s];\n      if (supported.value === accepted.value) {\n        return supportedLanguages[s];\n      }\n      if (!candidate && supported.language === accepted.language) {\n        candidate = supported;\n      }\n    }\n    if (candidate) {\n      return candidate;\n    }\n  }\n}\n\nfunction lang2obj(lang) {\n  const codeAndRegion = lang.split('-');\n  return {\n    value: lang,\n    language: codeAndRegion[0],\n    region: codeAndRegion[1]\n  };\n}\n\nconst parseAcceptLanguage = require('parse-accept-language');\n\nmodule.exports = function (opts) {\n  const supportedLanguages = [ opts.defaultLanguage ]\n    .concat(opts.supportedLanguages)\n    .map(lang2obj);\n\n  // mark language the we select by default with low quality\n  const defaultParsedLanguage = Object.assign({ q: -1 }, supportedLanguages[0]);\n\n  return function detectLanguage(req, res, next) {\n    if (req.lang) {\n      debug('skip - language already detected:', req.lang);\n      return next();\n    }\n    debug('started:', req.lang);\n    const pal = parseAcceptLanguage(req);\n    req.parsedLang = findMatch(supportedLanguages, pal) || defaultParsedLanguage;\n    req.lang = req.parsedLang.value;\n    debug('detected:', req.lang);\n    next();\n  };\n};\n"]},"metadata":{},"sourceType":"script"}